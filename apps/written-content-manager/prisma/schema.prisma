// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseType {
  WORKSHOP
  TUTORIAL
}

enum AnalyticsEventType {
  COURSE_CREATED
  COURSE_DELETED
  SECTION_CREATED
  SECTION_DELETED
  EXERCISE_CREATED
  EXERCISE_DELETED
  EXERCISE_MARKED_READY_FOR_RECORDING
}

model AnalyticsEvent {
  id        String             @id @default(uuid())
  type      AnalyticsEventType
  payload   Json
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Course {
  id        String     @id @default(uuid())
  title     String
  type      CourseType
  repoSlug  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  sections Section[]
}

model Section {
  id        String     @id @default(uuid())
  title     String
  order     Int
  courseId  String
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  exercises Exercise[]
}

enum ExerciseType {
  EXPLAINER
  PROBLEM_SOLUTION
}

model Exercise {
  id                String       @id @default(uuid())
  title             String
  content           String?
  learningGoal      String?
  notes             String?
  description       String?
  readyForRecording Boolean      @default(false)
  type              ExerciseType @default(EXPLAINER)
  sectionId         String
  order             Int
  section           Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deleted           Boolean      @default(false)
}
