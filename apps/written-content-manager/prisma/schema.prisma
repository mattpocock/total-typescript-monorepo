// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseType {
  WORKSHOP
  TUTORIAL
}

enum AnalyticsEventType {
  POST_CREATED
  POST_DELETED
  POST_MARKED_AS_POSTED
  COURSE_CREATED
  COURSE_DELETED
  SECTION_CREATED
  SECTION_DELETED
  EXERCISE_CREATED
  EXERCISE_DELETED
  EXERCISE_MARKED_READY_FOR_RECORDING
  EXERCISE_AUDIO_RECORDING_CREATED
  EXERCISE_AUDIO_RECORDING_DELETED
  EXERCISE_VIDEO_RECORDING_MARKED_AS_FINAL
}

model AnalyticsEvent {
  id        String             @id @default(uuid())
  type      AnalyticsEventType
  payload   Json
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Course {
  id                  String     @id @default(uuid())
  title               String
  type                CourseType
  repoSlug            String?
  deleted             Boolean    @default(false)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  sections            Section[]
  lastPrintedToRepoAt DateTime?
}

model Section {
  id        String     @id @default(uuid())
  title     String
  order     Int
  courseId  String
  deleted   Boolean    @default(false)
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  exercises Exercise[]
}

model Exercise {
  id                    String              @id @default(uuid())
  title                 String
  content               String?
  learningGoal          String?
  notes                 String?
  description           String?
  readyForRecording     Boolean             @default(false)
  audioRecordingCreated Boolean             @default(false)
  audioTranscript       String?
  sectionId             String
  order                 Int
  section               Section             @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  deleted               Boolean             @default(false)
  takes                 ExerciseVideoTake[]
}

model SocialPost {
  id           String                             @id @default(uuid())
  title        String
  learningGoal String?
  content      String?
  notes        String?
  isViral      Boolean                            @default(false)
  postedAt     DateTime?
  deleted      Boolean                            @default(false)
  createdAt    DateTime                           @default(now())
  updatedAt    DateTime                           @updatedAt
  collections  SocialPostToSocialPostCollection[]
}

model SocialPostToSocialPostCollection {
  order        Int
  socialPostId String
  socialPost   SocialPost           @relation(fields: [socialPostId], references: [id], onDelete: Cascade)
  collectionId String
  collection   SocialPostCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([socialPostId, collectionId])
}

model SocialPostCollection {
  id        String                             @id @default(uuid())
  title     String
  notes     String?
  deleted   Boolean                            @default(false)
  posts     SocialPostToSocialPostCollection[]
  createdAt DateTime                           @default(now())
  updatedAt DateTime                           @updatedAt
}

model ExerciseVideoTake {
  id         String   @id @default(uuid())
  uri        String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  isFinal    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Concept {
  id           String                        @id @default(uuid())
  title        String
  content      String
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @updatedAt
  deletedAt    DateTime?
  workflowRuns ContentWorkflowRunToConcept[]
}

model ContentWorkflow {
  id        String                @id @default(uuid())
  title     String
  steps     ContentWorkflowStep[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  runs      ContentWorkflowRun[]
  deletedAt DateTime?
}

model ContentWorkflowStep {
  id         String                   @id @default(uuid())
  prompt     String
  order      Int                      @default(0)
  workflowId String
  workflow   ContentWorkflow          @relation(fields: [workflowId], references: [id])
  /// The version of the step. This is used to determine if a workflow has changed.
  version    Int                      @default(1)
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt
  runs       ContentWorkflowRunStep[]
  deletedAt  DateTime?
}

model ContentWorkflowRun {
  id         String          @id @default(uuid())
  workflowId String
  workflow   ContentWorkflow @relation(fields: [workflowId], references: [id])

  createdAt DateTime                      @default(now())
  updatedAt DateTime                      @updatedAt
  steps     ContentWorkflowRunStep[]
  deletedAt DateTime?
  concepts  ContentWorkflowRunToConcept[]
}

model ContentWorkflowRunStep {
  version   Int                 @default(1)
  /// The input to the step. Only present on the first step.
  input     String?
  /// The output of the step.
  output    String
  stepId    String
  step      ContentWorkflowStep @relation(fields: [stepId], references: [id])
  runId     String
  run       ContentWorkflowRun  @relation(fields: [runId], references: [id])
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@id([runId, stepId])
}

model ContentWorkflowRunToConcept {
  runId     String
  run       ContentWorkflowRun @relation(fields: [runId], references: [id])
  conceptId String
  concept   Concept            @relation(fields: [conceptId], references: [id])
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@id([runId, conceptId])
}
